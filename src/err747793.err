Loading cuda/12.5.1/6wffrw2
  Loading requirement: libiconv/1.17/pmxhi4x xz/5.4.6/uxouxrg
    zlib-ng/2.1.5/uctcqfl libxml2/2.10.3/vdqe2g3
/home/skushwaha/DLGroup2/src/utils.py:23: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  images = torch.load("/home/skushwaha/DLGroup2/src/tensor_images.pt")
/home/skushwaha/DLGroup2/src/utils.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  labels = torch.load("/home/skushwaha/DLGroup2/src/labels.pt")
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
INFO:custom_layers:grad_output: torch.Size([32, 10])
INFO:custom_layers:grad_output: torch.Size([32, 128])
INFO:custom_layers:grad_output: torch.Size([32, 512])
Traceback (most recent call last):
  File "/home/skushwaha/DLGroup2/src/custom_mlp.py", line 28, in <module>
    train_epochloss = pipeline.train_step(model, optimizer)
  File "/home/skushwaha/DLGroup2/src/utils.py", line 39, in train_step
    for batchcount, (images, labels) in enumerate(self.trainloader):
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1344, in _next_data
    return self._process_data(data)
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1370, in _process_data
    data.reraise()
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/_utils.py", line 706, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 1.
Original Traceback (most recent call last):
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 309, in _worker_loop
    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 52, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/dataset.py", line 350, in __getitem__
    return self.datasets[dataset_idx][sample_idx]
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/dataset.py", line 211, in __getitem__
    return tuple(tensor[index] for tensor in self.tensors)
  File "/home/skushwaha/.local/lib/python3.9/site-packages/torch/utils/data/dataset.py", line 211, in <genexpr>
    return tuple(tensor[index] for tensor in self.tensors)
RuntimeError: CUDA error: initialization error
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.


